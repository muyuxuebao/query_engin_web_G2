package com.query_engin.thrift.thriftImpl; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-10")
public class Token implements org.apache.thrift.TBase<Token, Token._Fields>, java.io.Serializable, Cloneable, Comparable<Token> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Token");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOKEN_ITEM_VETOR_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenItemVetor", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TokenStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TokenTupleSchemeFactory());
  }

  public String name; // required
  public List<TokenItem> tokenItemVetor; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    TOKEN_ITEM_VETOR((short)2, "tokenItemVetor");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TOKEN_ITEM_VETOR
          return TOKEN_ITEM_VETOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN_ITEM_VETOR, new org.apache.thrift.meta_data.FieldMetaData("tokenItemVetor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TokenItem"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Token.class, metaDataMap);
  }

  public Token() {
  }

  public Token(
    String name,
    List<TokenItem> tokenItemVetor)
  {
    this();
    this.name = name;
    this.tokenItemVetor = tokenItemVetor;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Token(Token other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetTokenItemVetor()) {
      List<TokenItem> __this__tokenItemVetor = new ArrayList<TokenItem>(other.tokenItemVetor.size());
      for (TokenItem other_element : other.tokenItemVetor) {
        __this__tokenItemVetor.add(other_element);
      }
      this.tokenItemVetor = __this__tokenItemVetor;
    }
  }

  public Token deepCopy() {
    return new Token(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.tokenItemVetor = null;
  }

  public String getName() {
    return this.name;
  }

  public Token setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getTokenItemVetorSize() {
    return (this.tokenItemVetor == null) ? 0 : this.tokenItemVetor.size();
  }

  public java.util.Iterator<TokenItem> getTokenItemVetorIterator() {
    return (this.tokenItemVetor == null) ? null : this.tokenItemVetor.iterator();
  }

  public void addToTokenItemVetor(TokenItem elem) {
    if (this.tokenItemVetor == null) {
      this.tokenItemVetor = new ArrayList<TokenItem>();
    }
    this.tokenItemVetor.add(elem);
  }

  public List<TokenItem> getTokenItemVetor() {
    return this.tokenItemVetor;
  }

  public Token setTokenItemVetor(List<TokenItem> tokenItemVetor) {
    this.tokenItemVetor = tokenItemVetor;
    return this;
  }

  public void unsetTokenItemVetor() {
    this.tokenItemVetor = null;
  }

  /** Returns true if field tokenItemVetor is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenItemVetor() {
    return this.tokenItemVetor != null;
  }

  public void setTokenItemVetorIsSet(boolean value) {
    if (!value) {
      this.tokenItemVetor = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TOKEN_ITEM_VETOR:
      if (value == null) {
        unsetTokenItemVetor();
      } else {
        setTokenItemVetor((List<TokenItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TOKEN_ITEM_VETOR:
      return getTokenItemVetor();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TOKEN_ITEM_VETOR:
      return isSetTokenItemVetor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Token)
      return this.equals((Token)that);
    return false;
  }

  public boolean equals(Token that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_tokenItemVetor = true && this.isSetTokenItemVetor();
    boolean that_present_tokenItemVetor = true && that.isSetTokenItemVetor();
    if (this_present_tokenItemVetor || that_present_tokenItemVetor) {
      if (!(this_present_tokenItemVetor && that_present_tokenItemVetor))
        return false;
      if (!this.tokenItemVetor.equals(that.tokenItemVetor))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_tokenItemVetor = true && (isSetTokenItemVetor());
    list.add(present_tokenItemVetor);
    if (present_tokenItemVetor)
      list.add(tokenItemVetor);

    return list.hashCode();
  }

  @Override
  public int compareTo(Token other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenItemVetor()).compareTo(other.isSetTokenItemVetor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenItemVetor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenItemVetor, other.tokenItemVetor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Token(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenItemVetor:");
    if (this.tokenItemVetor == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenItemVetor);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenStandardSchemeFactory implements SchemeFactory {
    public TokenStandardScheme getScheme() {
      return new TokenStandardScheme();
    }
  }

  private static class TokenStandardScheme extends StandardScheme<Token> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Token struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOKEN_ITEM_VETOR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tokenItemVetor = new ArrayList<TokenItem>(_list0.size);
                TokenItem _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TokenItem();
                  _elem1.read(iprot);
                  struct.tokenItemVetor.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTokenItemVetorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Token struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.tokenItemVetor != null) {
        oprot.writeFieldBegin(TOKEN_ITEM_VETOR_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tokenItemVetor.size()));
          for (TokenItem _iter3 : struct.tokenItemVetor)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenTupleSchemeFactory implements SchemeFactory {
    public TokenTupleScheme getScheme() {
      return new TokenTupleScheme();
    }
  }

  private static class TokenTupleScheme extends TupleScheme<Token> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Token struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetTokenItemVetor()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTokenItemVetor()) {
        {
          oprot.writeI32(struct.tokenItemVetor.size());
          for (TokenItem _iter4 : struct.tokenItemVetor)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Token struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tokenItemVetor = new ArrayList<TokenItem>(_list5.size);
          TokenItem _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TokenItem();
            _elem6.read(iprot);
            struct.tokenItemVetor.add(_elem6);
          }
        }
        struct.setTokenItemVetorIsSet(true);
      }
    }
  }

}

