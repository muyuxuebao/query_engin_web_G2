package com.query_engin.thrift.thriftImpl; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-10")
public class Response implements org.apache.thrift.TBase<Response, Response._Fields>, java.io.Serializable, Cloneable, Comparable<Response> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response");

  private static final org.apache.thrift.protocol.TField QUERYTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("querytype", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GET_USER_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("get_user_user", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ADD_USER_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("add_user_user_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ADD_WORD_WORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("add_word_word_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField GET_WORD_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("get_word_word", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField GET_TOKEN_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("get_token_token", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField GET_ALL_USER_USER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("get_all_user_user_list", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField GET_ALL_WORD_WORD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("get_all_word_word_list", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField GET_ALL_TOKEN_TOKEN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("get_all_token_token_list", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see QueryType
   */
  public QueryType querytype; // required
  public User get_user_user; // optional
  public long add_user_user_id; // optional
  public long add_word_word_id; // optional
  public Word get_word_word; // optional
  public Token get_token_token; // optional
  public List<User> get_all_user_user_list; // optional
  public List<Word> get_all_word_word_list; // optional
  public List<Token> get_all_token_token_list; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see QueryType
     */
    QUERYTYPE((short)1, "querytype"),
    GET_USER_USER((short)2, "get_user_user"),
    ADD_USER_USER_ID((short)3, "add_user_user_id"),
    ADD_WORD_WORD_ID((short)4, "add_word_word_id"),
    GET_WORD_WORD((short)5, "get_word_word"),
    GET_TOKEN_TOKEN((short)6, "get_token_token"),
    GET_ALL_USER_USER_LIST((short)7, "get_all_user_user_list"),
    GET_ALL_WORD_WORD_LIST((short)8, "get_all_word_word_list"),
    GET_ALL_TOKEN_TOKEN_LIST((short)9, "get_all_token_token_list");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERYTYPE
          return QUERYTYPE;
        case 2: // GET_USER_USER
          return GET_USER_USER;
        case 3: // ADD_USER_USER_ID
          return ADD_USER_USER_ID;
        case 4: // ADD_WORD_WORD_ID
          return ADD_WORD_WORD_ID;
        case 5: // GET_WORD_WORD
          return GET_WORD_WORD;
        case 6: // GET_TOKEN_TOKEN
          return GET_TOKEN_TOKEN;
        case 7: // GET_ALL_USER_USER_LIST
          return GET_ALL_USER_USER_LIST;
        case 8: // GET_ALL_WORD_WORD_LIST
          return GET_ALL_WORD_WORD_LIST;
        case 9: // GET_ALL_TOKEN_TOKEN_LIST
          return GET_ALL_TOKEN_TOKEN_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADD_USER_USER_ID_ISSET_ID = 0;
  private static final int __ADD_WORD_WORD_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GET_USER_USER,_Fields.ADD_USER_USER_ID,_Fields.ADD_WORD_WORD_ID,_Fields.GET_WORD_WORD,_Fields.GET_TOKEN_TOKEN,_Fields.GET_ALL_USER_USER_LIST,_Fields.GET_ALL_WORD_WORD_LIST,_Fields.GET_ALL_TOKEN_TOKEN_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERYTYPE, new org.apache.thrift.meta_data.FieldMetaData("querytype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, QueryType.class)));
    tmpMap.put(_Fields.GET_USER_USER, new org.apache.thrift.meta_data.FieldMetaData("get_user_user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
    tmpMap.put(_Fields.ADD_USER_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("add_user_user_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ADD_WORD_WORD_ID, new org.apache.thrift.meta_data.FieldMetaData("add_word_word_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GET_WORD_WORD, new org.apache.thrift.meta_data.FieldMetaData("get_word_word", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Word.class)));
    tmpMap.put(_Fields.GET_TOKEN_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("get_token_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class)));
    tmpMap.put(_Fields.GET_ALL_USER_USER_LIST, new org.apache.thrift.meta_data.FieldMetaData("get_all_user_user_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class))));
    tmpMap.put(_Fields.GET_ALL_WORD_WORD_LIST, new org.apache.thrift.meta_data.FieldMetaData("get_all_word_word_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Word.class))));
    tmpMap.put(_Fields.GET_ALL_TOKEN_TOKEN_LIST, new org.apache.thrift.meta_data.FieldMetaData("get_all_token_token_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response.class, metaDataMap);
  }

  public Response() {
  }

  public Response(
    QueryType querytype)
  {
    this();
    this.querytype = querytype;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Response(Response other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuerytype()) {
      this.querytype = other.querytype;
    }
    if (other.isSetGet_user_user()) {
      this.get_user_user = new User(other.get_user_user);
    }
    this.add_user_user_id = other.add_user_user_id;
    this.add_word_word_id = other.add_word_word_id;
    if (other.isSetGet_word_word()) {
      this.get_word_word = new Word(other.get_word_word);
    }
    if (other.isSetGet_token_token()) {
      this.get_token_token = new Token(other.get_token_token);
    }
    if (other.isSetGet_all_user_user_list()) {
      List<User> __this__get_all_user_user_list = new ArrayList<User>(other.get_all_user_user_list.size());
      for (User other_element : other.get_all_user_user_list) {
        __this__get_all_user_user_list.add(new User(other_element));
      }
      this.get_all_user_user_list = __this__get_all_user_user_list;
    }
    if (other.isSetGet_all_word_word_list()) {
      List<Word> __this__get_all_word_word_list = new ArrayList<Word>(other.get_all_word_word_list.size());
      for (Word other_element : other.get_all_word_word_list) {
        __this__get_all_word_word_list.add(new Word(other_element));
      }
      this.get_all_word_word_list = __this__get_all_word_word_list;
    }
    if (other.isSetGet_all_token_token_list()) {
      List<Token> __this__get_all_token_token_list = new ArrayList<Token>(other.get_all_token_token_list.size());
      for (Token other_element : other.get_all_token_token_list) {
        __this__get_all_token_token_list.add(new Token(other_element));
      }
      this.get_all_token_token_list = __this__get_all_token_token_list;
    }
  }

  public Response deepCopy() {
    return new Response(this);
  }

  @Override
  public void clear() {
    this.querytype = null;
    this.get_user_user = null;
    setAdd_user_user_idIsSet(false);
    this.add_user_user_id = 0;
    setAdd_word_word_idIsSet(false);
    this.add_word_word_id = 0;
    this.get_word_word = null;
    this.get_token_token = null;
    this.get_all_user_user_list = null;
    this.get_all_word_word_list = null;
    this.get_all_token_token_list = null;
  }

  /**
   * 
   * @see QueryType
   */
  public QueryType getQuerytype() {
    return this.querytype;
  }

  /**
   * 
   * @see QueryType
   */
  public Response setQuerytype(QueryType querytype) {
    this.querytype = querytype;
    return this;
  }

  public void unsetQuerytype() {
    this.querytype = null;
  }

  /** Returns true if field querytype is set (has been assigned a value) and false otherwise */
  public boolean isSetQuerytype() {
    return this.querytype != null;
  }

  public void setQuerytypeIsSet(boolean value) {
    if (!value) {
      this.querytype = null;
    }
  }

  public User getGet_user_user() {
    return this.get_user_user;
  }

  public Response setGet_user_user(User get_user_user) {
    this.get_user_user = get_user_user;
    return this;
  }

  public void unsetGet_user_user() {
    this.get_user_user = null;
  }

  /** Returns true if field get_user_user is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_user_user() {
    return this.get_user_user != null;
  }

  public void setGet_user_userIsSet(boolean value) {
    if (!value) {
      this.get_user_user = null;
    }
  }

  public long getAdd_user_user_id() {
    return this.add_user_user_id;
  }

  public Response setAdd_user_user_id(long add_user_user_id) {
    this.add_user_user_id = add_user_user_id;
    setAdd_user_user_idIsSet(true);
    return this;
  }

  public void unsetAdd_user_user_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADD_USER_USER_ID_ISSET_ID);
  }

  /** Returns true if field add_user_user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAdd_user_user_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ADD_USER_USER_ID_ISSET_ID);
  }

  public void setAdd_user_user_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADD_USER_USER_ID_ISSET_ID, value);
  }

  public long getAdd_word_word_id() {
    return this.add_word_word_id;
  }

  public Response setAdd_word_word_id(long add_word_word_id) {
    this.add_word_word_id = add_word_word_id;
    setAdd_word_word_idIsSet(true);
    return this;
  }

  public void unsetAdd_word_word_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADD_WORD_WORD_ID_ISSET_ID);
  }

  /** Returns true if field add_word_word_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAdd_word_word_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ADD_WORD_WORD_ID_ISSET_ID);
  }

  public void setAdd_word_word_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADD_WORD_WORD_ID_ISSET_ID, value);
  }

  public Word getGet_word_word() {
    return this.get_word_word;
  }

  public Response setGet_word_word(Word get_word_word) {
    this.get_word_word = get_word_word;
    return this;
  }

  public void unsetGet_word_word() {
    this.get_word_word = null;
  }

  /** Returns true if field get_word_word is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_word_word() {
    return this.get_word_word != null;
  }

  public void setGet_word_wordIsSet(boolean value) {
    if (!value) {
      this.get_word_word = null;
    }
  }

  public Token getGet_token_token() {
    return this.get_token_token;
  }

  public Response setGet_token_token(Token get_token_token) {
    this.get_token_token = get_token_token;
    return this;
  }

  public void unsetGet_token_token() {
    this.get_token_token = null;
  }

  /** Returns true if field get_token_token is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_token_token() {
    return this.get_token_token != null;
  }

  public void setGet_token_tokenIsSet(boolean value) {
    if (!value) {
      this.get_token_token = null;
    }
  }

  public int getGet_all_user_user_listSize() {
    return (this.get_all_user_user_list == null) ? 0 : this.get_all_user_user_list.size();
  }

  public java.util.Iterator<User> getGet_all_user_user_listIterator() {
    return (this.get_all_user_user_list == null) ? null : this.get_all_user_user_list.iterator();
  }

  public void addToGet_all_user_user_list(User elem) {
    if (this.get_all_user_user_list == null) {
      this.get_all_user_user_list = new ArrayList<User>();
    }
    this.get_all_user_user_list.add(elem);
  }

  public List<User> getGet_all_user_user_list() {
    return this.get_all_user_user_list;
  }

  public Response setGet_all_user_user_list(List<User> get_all_user_user_list) {
    this.get_all_user_user_list = get_all_user_user_list;
    return this;
  }

  public void unsetGet_all_user_user_list() {
    this.get_all_user_user_list = null;
  }

  /** Returns true if field get_all_user_user_list is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_all_user_user_list() {
    return this.get_all_user_user_list != null;
  }

  public void setGet_all_user_user_listIsSet(boolean value) {
    if (!value) {
      this.get_all_user_user_list = null;
    }
  }

  public int getGet_all_word_word_listSize() {
    return (this.get_all_word_word_list == null) ? 0 : this.get_all_word_word_list.size();
  }

  public java.util.Iterator<Word> getGet_all_word_word_listIterator() {
    return (this.get_all_word_word_list == null) ? null : this.get_all_word_word_list.iterator();
  }

  public void addToGet_all_word_word_list(Word elem) {
    if (this.get_all_word_word_list == null) {
      this.get_all_word_word_list = new ArrayList<Word>();
    }
    this.get_all_word_word_list.add(elem);
  }

  public List<Word> getGet_all_word_word_list() {
    return this.get_all_word_word_list;
  }

  public Response setGet_all_word_word_list(List<Word> get_all_word_word_list) {
    this.get_all_word_word_list = get_all_word_word_list;
    return this;
  }

  public void unsetGet_all_word_word_list() {
    this.get_all_word_word_list = null;
  }

  /** Returns true if field get_all_word_word_list is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_all_word_word_list() {
    return this.get_all_word_word_list != null;
  }

  public void setGet_all_word_word_listIsSet(boolean value) {
    if (!value) {
      this.get_all_word_word_list = null;
    }
  }

  public int getGet_all_token_token_listSize() {
    return (this.get_all_token_token_list == null) ? 0 : this.get_all_token_token_list.size();
  }

  public java.util.Iterator<Token> getGet_all_token_token_listIterator() {
    return (this.get_all_token_token_list == null) ? null : this.get_all_token_token_list.iterator();
  }

  public void addToGet_all_token_token_list(Token elem) {
    if (this.get_all_token_token_list == null) {
      this.get_all_token_token_list = new ArrayList<Token>();
    }
    this.get_all_token_token_list.add(elem);
  }

  public List<Token> getGet_all_token_token_list() {
    return this.get_all_token_token_list;
  }

  public Response setGet_all_token_token_list(List<Token> get_all_token_token_list) {
    this.get_all_token_token_list = get_all_token_token_list;
    return this;
  }

  public void unsetGet_all_token_token_list() {
    this.get_all_token_token_list = null;
  }

  /** Returns true if field get_all_token_token_list is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_all_token_token_list() {
    return this.get_all_token_token_list != null;
  }

  public void setGet_all_token_token_listIsSet(boolean value) {
    if (!value) {
      this.get_all_token_token_list = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERYTYPE:
      if (value == null) {
        unsetQuerytype();
      } else {
        setQuerytype((QueryType)value);
      }
      break;

    case GET_USER_USER:
      if (value == null) {
        unsetGet_user_user();
      } else {
        setGet_user_user((User)value);
      }
      break;

    case ADD_USER_USER_ID:
      if (value == null) {
        unsetAdd_user_user_id();
      } else {
        setAdd_user_user_id((Long)value);
      }
      break;

    case ADD_WORD_WORD_ID:
      if (value == null) {
        unsetAdd_word_word_id();
      } else {
        setAdd_word_word_id((Long)value);
      }
      break;

    case GET_WORD_WORD:
      if (value == null) {
        unsetGet_word_word();
      } else {
        setGet_word_word((Word)value);
      }
      break;

    case GET_TOKEN_TOKEN:
      if (value == null) {
        unsetGet_token_token();
      } else {
        setGet_token_token((Token)value);
      }
      break;

    case GET_ALL_USER_USER_LIST:
      if (value == null) {
        unsetGet_all_user_user_list();
      } else {
        setGet_all_user_user_list((List<User>)value);
      }
      break;

    case GET_ALL_WORD_WORD_LIST:
      if (value == null) {
        unsetGet_all_word_word_list();
      } else {
        setGet_all_word_word_list((List<Word>)value);
      }
      break;

    case GET_ALL_TOKEN_TOKEN_LIST:
      if (value == null) {
        unsetGet_all_token_token_list();
      } else {
        setGet_all_token_token_list((List<Token>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERYTYPE:
      return getQuerytype();

    case GET_USER_USER:
      return getGet_user_user();

    case ADD_USER_USER_ID:
      return getAdd_user_user_id();

    case ADD_WORD_WORD_ID:
      return getAdd_word_word_id();

    case GET_WORD_WORD:
      return getGet_word_word();

    case GET_TOKEN_TOKEN:
      return getGet_token_token();

    case GET_ALL_USER_USER_LIST:
      return getGet_all_user_user_list();

    case GET_ALL_WORD_WORD_LIST:
      return getGet_all_word_word_list();

    case GET_ALL_TOKEN_TOKEN_LIST:
      return getGet_all_token_token_list();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERYTYPE:
      return isSetQuerytype();
    case GET_USER_USER:
      return isSetGet_user_user();
    case ADD_USER_USER_ID:
      return isSetAdd_user_user_id();
    case ADD_WORD_WORD_ID:
      return isSetAdd_word_word_id();
    case GET_WORD_WORD:
      return isSetGet_word_word();
    case GET_TOKEN_TOKEN:
      return isSetGet_token_token();
    case GET_ALL_USER_USER_LIST:
      return isSetGet_all_user_user_list();
    case GET_ALL_WORD_WORD_LIST:
      return isSetGet_all_word_word_list();
    case GET_ALL_TOKEN_TOKEN_LIST:
      return isSetGet_all_token_token_list();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Response)
      return this.equals((Response)that);
    return false;
  }

  public boolean equals(Response that) {
    if (that == null)
      return false;

    boolean this_present_querytype = true && this.isSetQuerytype();
    boolean that_present_querytype = true && that.isSetQuerytype();
    if (this_present_querytype || that_present_querytype) {
      if (!(this_present_querytype && that_present_querytype))
        return false;
      if (!this.querytype.equals(that.querytype))
        return false;
    }

    boolean this_present_get_user_user = true && this.isSetGet_user_user();
    boolean that_present_get_user_user = true && that.isSetGet_user_user();
    if (this_present_get_user_user || that_present_get_user_user) {
      if (!(this_present_get_user_user && that_present_get_user_user))
        return false;
      if (!this.get_user_user.equals(that.get_user_user))
        return false;
    }

    boolean this_present_add_user_user_id = true && this.isSetAdd_user_user_id();
    boolean that_present_add_user_user_id = true && that.isSetAdd_user_user_id();
    if (this_present_add_user_user_id || that_present_add_user_user_id) {
      if (!(this_present_add_user_user_id && that_present_add_user_user_id))
        return false;
      if (this.add_user_user_id != that.add_user_user_id)
        return false;
    }

    boolean this_present_add_word_word_id = true && this.isSetAdd_word_word_id();
    boolean that_present_add_word_word_id = true && that.isSetAdd_word_word_id();
    if (this_present_add_word_word_id || that_present_add_word_word_id) {
      if (!(this_present_add_word_word_id && that_present_add_word_word_id))
        return false;
      if (this.add_word_word_id != that.add_word_word_id)
        return false;
    }

    boolean this_present_get_word_word = true && this.isSetGet_word_word();
    boolean that_present_get_word_word = true && that.isSetGet_word_word();
    if (this_present_get_word_word || that_present_get_word_word) {
      if (!(this_present_get_word_word && that_present_get_word_word))
        return false;
      if (!this.get_word_word.equals(that.get_word_word))
        return false;
    }

    boolean this_present_get_token_token = true && this.isSetGet_token_token();
    boolean that_present_get_token_token = true && that.isSetGet_token_token();
    if (this_present_get_token_token || that_present_get_token_token) {
      if (!(this_present_get_token_token && that_present_get_token_token))
        return false;
      if (!this.get_token_token.equals(that.get_token_token))
        return false;
    }

    boolean this_present_get_all_user_user_list = true && this.isSetGet_all_user_user_list();
    boolean that_present_get_all_user_user_list = true && that.isSetGet_all_user_user_list();
    if (this_present_get_all_user_user_list || that_present_get_all_user_user_list) {
      if (!(this_present_get_all_user_user_list && that_present_get_all_user_user_list))
        return false;
      if (!this.get_all_user_user_list.equals(that.get_all_user_user_list))
        return false;
    }

    boolean this_present_get_all_word_word_list = true && this.isSetGet_all_word_word_list();
    boolean that_present_get_all_word_word_list = true && that.isSetGet_all_word_word_list();
    if (this_present_get_all_word_word_list || that_present_get_all_word_word_list) {
      if (!(this_present_get_all_word_word_list && that_present_get_all_word_word_list))
        return false;
      if (!this.get_all_word_word_list.equals(that.get_all_word_word_list))
        return false;
    }

    boolean this_present_get_all_token_token_list = true && this.isSetGet_all_token_token_list();
    boolean that_present_get_all_token_token_list = true && that.isSetGet_all_token_token_list();
    if (this_present_get_all_token_token_list || that_present_get_all_token_token_list) {
      if (!(this_present_get_all_token_token_list && that_present_get_all_token_token_list))
        return false;
      if (!this.get_all_token_token_list.equals(that.get_all_token_token_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_querytype = true && (isSetQuerytype());
    list.add(present_querytype);
    if (present_querytype)
      list.add(querytype.getValue());

    boolean present_get_user_user = true && (isSetGet_user_user());
    list.add(present_get_user_user);
    if (present_get_user_user)
      list.add(get_user_user);

    boolean present_add_user_user_id = true && (isSetAdd_user_user_id());
    list.add(present_add_user_user_id);
    if (present_add_user_user_id)
      list.add(add_user_user_id);

    boolean present_add_word_word_id = true && (isSetAdd_word_word_id());
    list.add(present_add_word_word_id);
    if (present_add_word_word_id)
      list.add(add_word_word_id);

    boolean present_get_word_word = true && (isSetGet_word_word());
    list.add(present_get_word_word);
    if (present_get_word_word)
      list.add(get_word_word);

    boolean present_get_token_token = true && (isSetGet_token_token());
    list.add(present_get_token_token);
    if (present_get_token_token)
      list.add(get_token_token);

    boolean present_get_all_user_user_list = true && (isSetGet_all_user_user_list());
    list.add(present_get_all_user_user_list);
    if (present_get_all_user_user_list)
      list.add(get_all_user_user_list);

    boolean present_get_all_word_word_list = true && (isSetGet_all_word_word_list());
    list.add(present_get_all_word_word_list);
    if (present_get_all_word_word_list)
      list.add(get_all_word_word_list);

    boolean present_get_all_token_token_list = true && (isSetGet_all_token_token_list());
    list.add(present_get_all_token_token_list);
    if (present_get_all_token_token_list)
      list.add(get_all_token_token_list);

    return list.hashCode();
  }

  @Override
  public int compareTo(Response other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuerytype()).compareTo(other.isSetQuerytype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuerytype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.querytype, other.querytype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_user_user()).compareTo(other.isSetGet_user_user());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_user_user()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_user_user, other.get_user_user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdd_user_user_id()).compareTo(other.isSetAdd_user_user_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdd_user_user_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.add_user_user_id, other.add_user_user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdd_word_word_id()).compareTo(other.isSetAdd_word_word_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdd_word_word_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.add_word_word_id, other.add_word_word_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_word_word()).compareTo(other.isSetGet_word_word());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_word_word()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_word_word, other.get_word_word);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_token_token()).compareTo(other.isSetGet_token_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_token_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_token_token, other.get_token_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_all_user_user_list()).compareTo(other.isSetGet_all_user_user_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_all_user_user_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_all_user_user_list, other.get_all_user_user_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_all_word_word_list()).compareTo(other.isSetGet_all_word_word_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_all_word_word_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_all_word_word_list, other.get_all_word_word_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_all_token_token_list()).compareTo(other.isSetGet_all_token_token_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_all_token_token_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_all_token_token_list, other.get_all_token_token_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Response(");
    boolean first = true;

    sb.append("querytype:");
    if (this.querytype == null) {
      sb.append("null");
    } else {
      sb.append(this.querytype);
    }
    first = false;
    if (isSetGet_user_user()) {
      if (!first) sb.append(", ");
      sb.append("get_user_user:");
      if (this.get_user_user == null) {
        sb.append("null");
      } else {
        sb.append(this.get_user_user);
      }
      first = false;
    }
    if (isSetAdd_user_user_id()) {
      if (!first) sb.append(", ");
      sb.append("add_user_user_id:");
      sb.append(this.add_user_user_id);
      first = false;
    }
    if (isSetAdd_word_word_id()) {
      if (!first) sb.append(", ");
      sb.append("add_word_word_id:");
      sb.append(this.add_word_word_id);
      first = false;
    }
    if (isSetGet_word_word()) {
      if (!first) sb.append(", ");
      sb.append("get_word_word:");
      if (this.get_word_word == null) {
        sb.append("null");
      } else {
        sb.append(this.get_word_word);
      }
      first = false;
    }
    if (isSetGet_token_token()) {
      if (!first) sb.append(", ");
      sb.append("get_token_token:");
      if (this.get_token_token == null) {
        sb.append("null");
      } else {
        sb.append(this.get_token_token);
      }
      first = false;
    }
    if (isSetGet_all_user_user_list()) {
      if (!first) sb.append(", ");
      sb.append("get_all_user_user_list:");
      if (this.get_all_user_user_list == null) {
        sb.append("null");
      } else {
        sb.append(this.get_all_user_user_list);
      }
      first = false;
    }
    if (isSetGet_all_word_word_list()) {
      if (!first) sb.append(", ");
      sb.append("get_all_word_word_list:");
      if (this.get_all_word_word_list == null) {
        sb.append("null");
      } else {
        sb.append(this.get_all_word_word_list);
      }
      first = false;
    }
    if (isSetGet_all_token_token_list()) {
      if (!first) sb.append(", ");
      sb.append("get_all_token_token_list:");
      if (this.get_all_token_token_list == null) {
        sb.append("null");
      } else {
        sb.append(this.get_all_token_token_list);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (querytype == null) {
      throw new TProtocolException("Required field 'querytype' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (get_user_user != null) {
      get_user_user.validate();
    }
    if (get_word_word != null) {
      get_word_word.validate();
    }
    if (get_token_token != null) {
      get_token_token.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseStandardSchemeFactory implements SchemeFactory {
    public ResponseStandardScheme getScheme() {
      return new ResponseStandardScheme();
    }
  }

  private static class ResponseStandardScheme extends StandardScheme<Response> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Response struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERYTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.querytype = QueryType.findByValue(iprot.readI32());
              struct.setQuerytypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GET_USER_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.get_user_user = new User();
              struct.get_user_user.read(iprot);
              struct.setGet_user_userIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ADD_USER_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.add_user_user_id = iprot.readI64();
              struct.setAdd_user_user_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADD_WORD_WORD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.add_word_word_id = iprot.readI64();
              struct.setAdd_word_word_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GET_WORD_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.get_word_word = new Word();
              struct.get_word_word.read(iprot);
              struct.setGet_word_wordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GET_TOKEN_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.get_token_token = new Token();
              struct.get_token_token.read(iprot);
              struct.setGet_token_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GET_ALL_USER_USER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.get_all_user_user_list = new ArrayList<User>(_list8.size);
                User _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new User();
                  _elem9.read(iprot);
                  struct.get_all_user_user_list.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setGet_all_user_user_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GET_ALL_WORD_WORD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.get_all_word_word_list = new ArrayList<Word>(_list11.size);
                Word _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new Word();
                  _elem12.read(iprot);
                  struct.get_all_word_word_list.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setGet_all_word_word_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GET_ALL_TOKEN_TOKEN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.get_all_token_token_list = new ArrayList<Token>(_list14.size);
                Token _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = new Token();
                  _elem15.read(iprot);
                  struct.get_all_token_token_list.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setGet_all_token_token_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Response struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.querytype != null) {
        oprot.writeFieldBegin(QUERYTYPE_FIELD_DESC);
        oprot.writeI32(struct.querytype.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.get_user_user != null) {
        if (struct.isSetGet_user_user()) {
          oprot.writeFieldBegin(GET_USER_USER_FIELD_DESC);
          struct.get_user_user.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAdd_user_user_id()) {
        oprot.writeFieldBegin(ADD_USER_USER_ID_FIELD_DESC);
        oprot.writeI64(struct.add_user_user_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdd_word_word_id()) {
        oprot.writeFieldBegin(ADD_WORD_WORD_ID_FIELD_DESC);
        oprot.writeI64(struct.add_word_word_id);
        oprot.writeFieldEnd();
      }
      if (struct.get_word_word != null) {
        if (struct.isSetGet_word_word()) {
          oprot.writeFieldBegin(GET_WORD_WORD_FIELD_DESC);
          struct.get_word_word.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.get_token_token != null) {
        if (struct.isSetGet_token_token()) {
          oprot.writeFieldBegin(GET_TOKEN_TOKEN_FIELD_DESC);
          struct.get_token_token.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.get_all_user_user_list != null) {
        if (struct.isSetGet_all_user_user_list()) {
          oprot.writeFieldBegin(GET_ALL_USER_USER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.get_all_user_user_list.size()));
            for (User _iter17 : struct.get_all_user_user_list)
            {
              _iter17.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.get_all_word_word_list != null) {
        if (struct.isSetGet_all_word_word_list()) {
          oprot.writeFieldBegin(GET_ALL_WORD_WORD_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.get_all_word_word_list.size()));
            for (Word _iter18 : struct.get_all_word_word_list)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.get_all_token_token_list != null) {
        if (struct.isSetGet_all_token_token_list()) {
          oprot.writeFieldBegin(GET_ALL_TOKEN_TOKEN_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.get_all_token_token_list.size()));
            for (Token _iter19 : struct.get_all_token_token_list)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseTupleSchemeFactory implements SchemeFactory {
    public ResponseTupleScheme getScheme() {
      return new ResponseTupleScheme();
    }
  }

  private static class ResponseTupleScheme extends TupleScheme<Response> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Response struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.querytype.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetGet_user_user()) {
        optionals.set(0);
      }
      if (struct.isSetAdd_user_user_id()) {
        optionals.set(1);
      }
      if (struct.isSetAdd_word_word_id()) {
        optionals.set(2);
      }
      if (struct.isSetGet_word_word()) {
        optionals.set(3);
      }
      if (struct.isSetGet_token_token()) {
        optionals.set(4);
      }
      if (struct.isSetGet_all_user_user_list()) {
        optionals.set(5);
      }
      if (struct.isSetGet_all_word_word_list()) {
        optionals.set(6);
      }
      if (struct.isSetGet_all_token_token_list()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetGet_user_user()) {
        struct.get_user_user.write(oprot);
      }
      if (struct.isSetAdd_user_user_id()) {
        oprot.writeI64(struct.add_user_user_id);
      }
      if (struct.isSetAdd_word_word_id()) {
        oprot.writeI64(struct.add_word_word_id);
      }
      if (struct.isSetGet_word_word()) {
        struct.get_word_word.write(oprot);
      }
      if (struct.isSetGet_token_token()) {
        struct.get_token_token.write(oprot);
      }
      if (struct.isSetGet_all_user_user_list()) {
        {
          oprot.writeI32(struct.get_all_user_user_list.size());
          for (User _iter20 : struct.get_all_user_user_list)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetGet_all_word_word_list()) {
        {
          oprot.writeI32(struct.get_all_word_word_list.size());
          for (Word _iter21 : struct.get_all_word_word_list)
          {
            _iter21.write(oprot);
          }
        }
      }
      if (struct.isSetGet_all_token_token_list()) {
        {
          oprot.writeI32(struct.get_all_token_token_list.size());
          for (Token _iter22 : struct.get_all_token_token_list)
          {
            _iter22.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Response struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.querytype = QueryType.findByValue(iprot.readI32());
      struct.setQuerytypeIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.get_user_user = new User();
        struct.get_user_user.read(iprot);
        struct.setGet_user_userIsSet(true);
      }
      if (incoming.get(1)) {
        struct.add_user_user_id = iprot.readI64();
        struct.setAdd_user_user_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.add_word_word_id = iprot.readI64();
        struct.setAdd_word_word_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.get_word_word = new Word();
        struct.get_word_word.read(iprot);
        struct.setGet_word_wordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.get_token_token = new Token();
        struct.get_token_token.read(iprot);
        struct.setGet_token_tokenIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.get_all_user_user_list = new ArrayList<User>(_list23.size);
          User _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new User();
            _elem24.read(iprot);
            struct.get_all_user_user_list.add(_elem24);
          }
        }
        struct.setGet_all_user_user_listIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.get_all_word_word_list = new ArrayList<Word>(_list26.size);
          Word _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = new Word();
            _elem27.read(iprot);
            struct.get_all_word_word_list.add(_elem27);
          }
        }
        struct.setGet_all_word_word_listIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.get_all_token_token_list = new ArrayList<Token>(_list29.size);
          Token _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new Token();
            _elem30.read(iprot);
            struct.get_all_token_token_list.add(_elem30);
          }
        }
        struct.setGet_all_token_token_listIsSet(true);
      }
    }
  }

}

