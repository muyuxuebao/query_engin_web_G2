package com.query_engin.thrift.thriftImpl; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-10")
public class TokenItem implements org.apache.thrift.TBase<TokenItem, TokenItem._Fields>, java.io.Serializable, Cloneable, Comparable<TokenItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TokenItem");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField WORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wordId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField POSTION_FIELD_DESC = new org.apache.thrift.protocol.TField("postion", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TokenItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TokenItemTupleSchemeFactory());
  }

  public long userId; // required
  public long wordId; // required
  public int postion; // required
  public int length; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    WORD_ID((short)2, "wordId"),
    POSTION((short)3, "postion"),
    LENGTH((short)4, "length");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // WORD_ID
          return WORD_ID;
        case 3: // POSTION
          return POSTION;
        case 4: // LENGTH
          return LENGTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __WORDID_ISSET_ID = 1;
  private static final int __POSTION_ISSET_ID = 2;
  private static final int __LENGTH_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WORD_ID, new org.apache.thrift.meta_data.FieldMetaData("wordId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POSTION, new org.apache.thrift.meta_data.FieldMetaData("postion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TokenItem.class, metaDataMap);
  }

  public TokenItem() {
  }

  public TokenItem(
    long userId,
    long wordId,
    int postion,
    int length)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.wordId = wordId;
    setWordIdIsSet(true);
    this.postion = postion;
    setPostionIsSet(true);
    this.length = length;
    setLengthIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TokenItem(TokenItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    this.wordId = other.wordId;
    this.postion = other.postion;
    this.length = other.length;
  }

  public TokenItem deepCopy() {
    return new TokenItem(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    setWordIdIsSet(false);
    this.wordId = 0;
    setPostionIsSet(false);
    this.postion = 0;
    setLengthIsSet(false);
    this.length = 0;
  }

  public long getUserId() {
    return this.userId;
  }

  public TokenItem setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public long getWordId() {
    return this.wordId;
  }

  public TokenItem setWordId(long wordId) {
    this.wordId = wordId;
    setWordIdIsSet(true);
    return this;
  }

  public void unsetWordId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORDID_ISSET_ID);
  }

  /** Returns true if field wordId is set (has been assigned a value) and false otherwise */
  public boolean isSetWordId() {
    return EncodingUtils.testBit(__isset_bitfield, __WORDID_ISSET_ID);
  }

  public void setWordIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORDID_ISSET_ID, value);
  }

  public int getPostion() {
    return this.postion;
  }

  public TokenItem setPostion(int postion) {
    this.postion = postion;
    setPostionIsSet(true);
    return this;
  }

  public void unsetPostion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSTION_ISSET_ID);
  }

  /** Returns true if field postion is set (has been assigned a value) and false otherwise */
  public boolean isSetPostion() {
    return EncodingUtils.testBit(__isset_bitfield, __POSTION_ISSET_ID);
  }

  public void setPostionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSTION_ISSET_ID, value);
  }

  public int getLength() {
    return this.length;
  }

  public TokenItem setLength(int length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case WORD_ID:
      if (value == null) {
        unsetWordId();
      } else {
        setWordId((Long)value);
      }
      break;

    case POSTION:
      if (value == null) {
        unsetPostion();
      } else {
        setPostion((Integer)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case WORD_ID:
      return getWordId();

    case POSTION:
      return getPostion();

    case LENGTH:
      return getLength();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case WORD_ID:
      return isSetWordId();
    case POSTION:
      return isSetPostion();
    case LENGTH:
      return isSetLength();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TokenItem)
      return this.equals((TokenItem)that);
    return false;
  }

  public boolean equals(TokenItem that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_wordId = true;
    boolean that_present_wordId = true;
    if (this_present_wordId || that_present_wordId) {
      if (!(this_present_wordId && that_present_wordId))
        return false;
      if (this.wordId != that.wordId)
        return false;
    }

    boolean this_present_postion = true;
    boolean that_present_postion = true;
    if (this_present_postion || that_present_postion) {
      if (!(this_present_postion && that_present_postion))
        return false;
      if (this.postion != that.postion)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_wordId = true;
    list.add(present_wordId);
    if (present_wordId)
      list.add(wordId);

    boolean present_postion = true;
    list.add(present_postion);
    if (present_postion)
      list.add(postion);

    boolean present_length = true;
    list.add(present_length);
    if (present_length)
      list.add(length);

    return list.hashCode();
  }

  @Override
  public int compareTo(TokenItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWordId()).compareTo(other.isSetWordId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWordId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wordId, other.wordId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostion()).compareTo(other.isSetPostion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postion, other.postion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TokenItem(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wordId:");
    sb.append(this.wordId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("postion:");
    sb.append(this.postion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenItemStandardSchemeFactory implements SchemeFactory {
    public TokenItemStandardScheme getScheme() {
      return new TokenItemStandardScheme();
    }
  }

  private static class TokenItemStandardScheme extends StandardScheme<TokenItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TokenItem struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WORD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.wordId = iprot.readI64();
              struct.setWordIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.postion = iprot.readI32();
              struct.setPostionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.length = iprot.readI32();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TokenItem struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WORD_ID_FIELD_DESC);
      oprot.writeI64(struct.wordId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSTION_FIELD_DESC);
      oprot.writeI32(struct.postion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(struct.length);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenItemTupleSchemeFactory implements SchemeFactory {
    public TokenItemTupleScheme getScheme() {
      return new TokenItemTupleScheme();
    }
  }

  private static class TokenItemTupleScheme extends TupleScheme<TokenItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TokenItem struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetWordId()) {
        optionals.set(1);
      }
      if (struct.isSetPostion()) {
        optionals.set(2);
      }
      if (struct.isSetLength()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetWordId()) {
        oprot.writeI64(struct.wordId);
      }
      if (struct.isSetPostion()) {
        oprot.writeI32(struct.postion);
      }
      if (struct.isSetLength()) {
        oprot.writeI32(struct.length);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TokenItem struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wordId = iprot.readI64();
        struct.setWordIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.postion = iprot.readI32();
        struct.setPostionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.length = iprot.readI32();
        struct.setLengthIsSet(true);
      }
    }
  }

}

